REST는 웹과 같은 분산 하이퍼미디어 시스템에서 사용하는 통신 네트워크 아키텍처로, 네트워크 아키텍처의 원리 모음이다.

웹은 전송 방식으로 HTTP를, 식별 방법으로 URI를 사용한다.  
HTTP는 웹에서 GET/POST/PUT/DELTE 등의 메서드를 사용하여 정보를 주고받는 프로토콜이다.  
REST는 HTTP와 URI의 단순하고 간결한 장점을 계승한 네트워크 아키텍처이다.  
아키텍처가 단순하다는 것이지 서버와 클라이언트가 단순하게 상호작용한다는 것을 의미하진 않는다.  
방식은 단순한데 구현은 자유니까  

목적은 다음과 같다.  
1. 구성요소 상호작용의 규모 확장성
2. 인터페이스의 범용성  
3. 구성요소의 독립적인 배포  
4. 중간적 구성요소를 이용한 응답 지연 감소, 보안 강화, 레거시 시스템 인캡슐레이션  

RESTful 제약 조건
REST 구현 원칙을 지키면서 REST 아키텍처를 만드는 것을 RESTful이라 하고, 제약 조건은 다음과 같다.
1. 클라이언트-서버(client-server)  
기본 원칙은 관심사의 명확한 분리이다. 관심사의 명확한 분리가 선행되면 서버의 구성요소가 단순화되고 확장성이 향상되어 여러 플랫폼을 지원할 수 있다.  
2. 무상태성(stateless)  
서버에 클라이언트의 상태 정보를 저장하지 않는 것을 말한다. 단순히 들어오는 요청만 처리하여 구현을 더 단순화한다. 
단, 클라이언트의 모든 요청은 서버가 요청을 알아듣는 데 필요한 모든 정보를 담고 있어야 한다.  
3. 캐시 가능(cacheable)  
클라이언트의 응답을 캐시할 수 있어야 한다. HTTP의 장점 중 캐시도 있기 때문에  
4. 계층화 시스템(latered system)  
서버는 중개 서버(게이트웨이, 프록시)나 로드 밸런싱, 공유 캐시 등의 기능을 사용하여 확장성 있는 시스템을 구성할 수 있다.  
5. 코드 온 디맨드(code on demand)  
클라이언트는 서버에서 자바 애플릿, 자바스크립트 실행 코드를 전송받아 기능을 일시적으로 확장할 수 있다. 이 제약은 선택 가능하다.  
6. 인터페이스 일관성(uniform interface)  
URI(통합 지원 식별자)로 지정된 리소스에 균일하고 통일된 인터페이스를 제공한다. 아키텍처를 단순하게 분리하여 독립적으로 만들 수 있다.  
6-1. 자원 식별  
6-2. 메세지를 통한 리소스 조작  
6-3. 자기 서술적 메세지  
6-4. 애플리케이션 상태에 대한 엔진으로서의 하이퍼미디어  

